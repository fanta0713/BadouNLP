# coding
import torch
import torch.nn as nn
import numpy as np
import random
import json
import matplotlib.pyplot as plt

"""
基于pytorch框架编写模型训练
实现一个自行构造的找规律（机器学习）任务
规律：x是一个5维向量，五维向量中最大值为向量特征"""

class TorchModel(nn.Module):
    def __init__(self, input_size, output_size):
        super(TorchModel, self).__init__()
        self.liner = nn.Linear(input_size, output_size)
        self.activation = torch.softmax # softmax配合交叉熵使用
        self.loss = nn.functional.cross_entropy
    
    def forward(self, x, y=None):
        x = self.liner(x)
        y_pred = self.activation(x, dim=1)
        if y is not None:
            return self.loss(y_pred, y)
        else:
            return y_pred

# 生成一个样本
def build_sample():
    x = np.random.random(5)
    max_index = np.argmax(x)  # 获取最大值的索引
    return x, max_index

# 随机生成一批样本
# 正负样本均匀生成
def build_dataset(total_sample_num):
    X = []
    Y = []
    for i in range(total_sample_num):
        x, y = build_sample()
        X.append(x)
        Y.append(y)
    return torch.FloatTensor(X), torch.LongTensor(Y)

# 评估模型
def evaluate(model):
    model.eval()
    test_sample_num = 100
    x, y = build_dataset(test_sample_num)
    correct, wrong = 0, 0
    with torch.no_grad():
        y_pred = model(x)
        _, predicted = torch.max(y_pred, dim=1)  # 获取预测的最大概率的索引
        for y_p, y_t in zip(predicted, y):
            if y_p == y_t:
                correct += 1
            else:
                wrong += 1
    print(f"正确预测个数：{correct}, 正确率：{correct/(correct + wrong)}")
    return correct/(correct+wrong)

# 模型训练
def main():
    # 配置参数
    epoch_num = 50 # 训练轮数
    batch_size = 20 # 每次训练样本个数
    train_sample = 5000 # 每轮训练总共训练的样本总数
    input_size = 5 # 输入向量维度
    output_size = 5
    learning_rate = 0.001   # 学习率
    # 建立模型
    model = TorchModel(input_size, output_size)
    # 选择优化器
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    # 创建训练集，正常任务是读取训练集
    train_x, train_y = build_dataset(train_sample)

    # 训练过程
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for batch_index in range(train_sample//batch_size):
            x = train_x[batch_index * batch_size: (batch_index + 1) * batch_size]
            y = train_y[batch_index * batch_size: (batch_index + 1) * batch_size]
            loss = model(x, y) # 等效model.forward(x, y)
            loss.backward()
            optim.step()
            optim.zero_grad()
            watch_loss.append(loss.item())
        print(f"=========\n第{epoch+1}轮平均loss:{np.mean(watch_loss)}")
        acc = evaluate(model)
        log.append([acc, float(np.mean(watch_loss))])
    # 保存模型
    torch.save(model.state_dict(), "model.bin")
    # 画图
    print(log)
    plt.plot(range(len(log)), [l[0] for l in log], label="acc")
    plt.plot(range(len(log)), [l[0] for l in log], label="loss")
    plt.legend()
    plt.show()
    return

# 使用训练好的模型做预测
def predict(model_path, input_vec):
    input_size = 5
    model = TorchModel(input_size)
    model.load_state_dict(torch.load(model_path))
    print(model.state_dict())

    model.eval()
    with torch.no_grad():
        result = model.forward(torch.FloatTensor(input_vec))
    for vec, res in zip(input_vec, result):
        print(f"输入：{vec}，预测类别：{round(float(res))}, 概率值：{res}")
main()
